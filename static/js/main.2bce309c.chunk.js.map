{"version":3,"sources":["features/starwars.js","components/StarWars.jsx","components/Favorites.jsx","components/Header.jsx","components/Holder.jsx","components/Planet.jsx","components/Form.jsx","App.js","serviceWorker.js","features/favorites.js","features/rootReducer.js","index.js"],"names":["addToFavorite","createAction","removeFromFavorite","actions","reducer","createReducer","state","action","payload","filter","p","name","pageNumber","StarWars","dispatch","useDispatch","favoriteList","useSelector","starwars","useState","error","setError","isLoaded","setIsLoaded","people","setPeople","myFilter","setMyFilter","filtered","setFiltered","showNext","setShowNext","showPrevious","setShowPrevious","selectedPerson","setSelectedPerson","url","setUrl","useEffect","fetch","then","result","json","console","log","results","message","className","type","value","onChange","event","target","filterWord","person","toLowerCase","includes","birth_year","eye_color","skin_color","placeholder","onClick","map","key","length","Favorites","myFavorites","allSelected","setAllSelected","peopleSelected","setPeopleSelected","planetSelected","setPlanetSelected","filteredJ","filterKey","setFilterKey","item","climate","status","terrain","Header","setView","menu","SHOW_DATA","PLANET","FORM","SHOW_FAVORITES","Holder","children","favoritePlanets","Planet","favoritePlanet","planets","setPlanets","next","planet","handleAddPlanet","Form","myOwnFavorite","setName","birthYear","setBirthYear","eyeColor","setEyeColor","skinColor","setSkinColor","isAddedBefore","setIsAddedBefore","submited","setSubmited","nameTouched","setNameTouched","birthTouched","setBirthTouched","eyeTouched","setEyeTouched","skinTouched","setSkinTouched","nameClass","birthClass","eyeClass","isNaN","skinClass","onBlur","e","disabled","filteredFavorite","App","view","mainContent","Boolean","window","location","hostname","match","addMyOwnName","addMyOwnBirthYear","rootReducer","combineReducers","starwarsReducer","favorites","favoritesReducer","store","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2bce309c.chunk.js","sourcesContent":["import { createAction, createReducer } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nconst addToFavorite = createAction('add to favorite');\r\nconst removeFromFavorite = createAction('remove from favorite');\r\n\r\nconst actions = {addToFavorite,removeFromFavorite};\r\nconst initialState =[]\r\n\r\n    \r\n \r\n    \r\n\r\nconst reducer = createReducer(initialState, {\r\n    [addToFavorite]: (state, action) =>  [...state, action.payload],\r\n    [removeFromFavorite]: (state, action) => \r\n\t\tstate.filter(p => p.name !== action.payload.name)\r\n\r\n   \r\n    \r\n         \r\n})\r\n\r\n\r\nexport { actions, reducer };\r\n\r\n","import React,{useState,useEffect} from 'react';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport { actions } from '../features/starwars';\r\nlet pageNumber =1;\r\nconst StarWars = () => {\r\n    const dispatch = useDispatch();\r\n    const favoriteList = useSelector(state => state.starwars);\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [people, setPeople] = useState([]);\r\n    const [myFilter,setMyFilter] = useState('');\r\n    const [filtered,setFiltered] = useState([]);\r\n    const [showNext,setShowNext]  = useState(true);\r\n    const [showPrevious,setShowPrevious]  = useState(false);\r\n    const [selectedPerson, setSelectedPerson] = useState(null);\r\n\r\n    //const [favoriteSelected,setFavoriteSelected] = useState(false);\r\n    \r\n    const [url,setUrl] = useState(`http://swapi.dev/api/people/?page=${pageNumber}`);\r\n    \r\n\r\n   \r\n    \r\n    const handleKeyUp = (event) => { \r\n      //setFavoriteSelected(false);\r\n      setMyFilter(event.target.value);\r\n      let filterWord = event.target.value;\r\n         \r\n           setFiltered([...people].filter(person =>(\r\n            person.name.toLowerCase().includes(filterWord) ||\r\n            person.birth_year.toLowerCase().includes(filterWord)) ||\r\n            person.eye_color.toLowerCase().includes(filterWord) ||\r\n            person.skin_color.toLowerCase().includes(filterWord)\r\n           ));   \r\n    }//handleKeyUp\r\n    \r\n    \r\n    const handleNextData =(event) =>{\r\n      if(pageNumber<=8){\r\n        console.log('favoriteList',favoriteList);\r\n        if(pageNumber===8){setShowNext(false);}\r\n        setShowPrevious(true);\r\n        pageNumber= pageNumber+1;\r\n       \r\n      setUrl(`http://swapi.dev/api/people/?page=${pageNumber}`) ;\r\n      }else{\r\n        console.log('over');\r\n        setShowNext(false);\r\n        \r\n       \r\n      }\r\n      \r\n    }  \r\n     \r\n    const handlePreviousData = () => {\r\n      if((pageNumber>=2)&&(pageNumber<=9)){\r\n        if(pageNumber===2){setShowPrevious(false);}\r\n        if(pageNumber>2){setShowPrevious(true);}\r\n        setShowNext(true);\r\n        pageNumber= pageNumber-1;\r\n        console.log('page number is:',pageNumber);\r\n       \r\n      setUrl(`http://swapi.dev/api/people/?page=${pageNumber}`) ;\r\n      }else{\r\n        \r\n        setShowPrevious(false);\r\n        \r\n       \r\n      }\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    useEffect(() => {\r\n        \r\n            fetch(url)\r\n            .then(result => result.json())\r\n            .then(\r\n             (result) => {\r\n              setIsLoaded(true);\r\n              console.log('result is:',result);\r\n              if((pageNumber!==1)){setShowPrevious(true);}\r\n              if(pageNumber===9){setShowNext(false);}\r\n              //setFavoriteSelected(false);\r\n              setPeople(result.results);\r\n              setFiltered(result.results);\r\n              \r\n              //console.log('Next page is:',result.next);\r\n            },\r\n            (error) => {\r\n              setIsLoaded(true);\r\n              setError(error);\r\n            }\r\n          )\r\n\r\n         }, [url])\r\n    \r\n      if (error) {\r\n        return <div>Error: {error.message}</div>;\r\n      } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n      } else {\r\n        return (\r\n            <section>\r\n              <div className=\"list-leader\">\r\n              <input type=\"text\" value = {myFilter} onChange={handleKeyUp} placeholder=\"Skriv vad du vill söka efter...\"></input>\r\n           \r\n           \r\n              <div>\r\n                \r\n                <button className={(!showPrevious) ? 'hideShowNext': 'showNext'} onClick={handlePreviousData}>Previous page!</button>\r\n                <button className={(showNext) ? 'showNext': 'hideShowNext'} onClick={handleNextData}>Next page!</button>\r\n              </div>\r\n              \r\n              \r\n              \r\n              \r\n              </div>\r\n                \r\n                \r\n              \r\n                <div className=\"people-list\">\r\n                \r\n                  {filtered.map(person => (\r\n                     <div key={person.name}>\r\n                      Name: {person.name}<br/>\r\n                      Birth-year: {person.birth_year}<br/>\r\n                      Eye-color: {person.eye_color}<br />\r\n                      Skin-color: {person.skin_color}\r\n                    \r\n                      <button key={person.name} \r\n                      className={((favoriteList.filter(p=>p.name===person.name).length > 0)||(selectedPerson === person.name)) ? 'favorite-selected' : 'favorite-unselected'}\r\n                      \r\n                      onClick={() =>{ setSelectedPerson(person.name); dispatch(actions.addToFavorite(person)); }}>Add to favorites!</button>\r\n                      \r\n                      <button \r\n                      className={\r\n                        ((favoriteList.filter(p=>p.name===person.name).length > 0)||(selectedPerson === person.name)) ? 'visible' : 'unvisible'}>Selected!</button>\r\n        \r\n                     </div> \r\n                     \r\n                    ))}\r\n                    \r\n                </div>\r\n                \r\n                \r\n                <br />\r\n                \r\n            </section>\r\n          \r\n        );\r\n      }\r\n\r\n}\r\n    \r\n    \r\n   \r\n\r\nexport default StarWars;\r\n\r\n","import React, { useState } from 'react';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport { actions } from '../features/starwars';\r\n\r\n\r\nconst Favorites = () =>{\r\n    \r\n    const dispatch = useDispatch();\r\n    const myFavorites = useSelector(state => state.starwars);\r\n    const [allSelected,setAllSelected] = useState(true);\r\n    const [peopleSelected,setPeopleSelected] = useState(false);\r\n    const [planetSelected,setPlanetSelected] = useState(false);\r\n    \r\n    \r\n     let filteredJ = myFavorites;\r\n     const [filterKey,setFilterKey] = useState('');\r\n    \r\n\r\n   \r\n     const handleFavoritePeople = () => {\r\n         setFilterKey('people');\r\n         setPeopleSelected(true);\r\n         setAllSelected(false);\r\n         setPlanetSelected(false);\r\n         \r\n    }\r\n\r\n    const handleFavoritePlanets = () => {\r\n        setFilterKey('planet');\r\n        setPeopleSelected(false);\r\n         setAllSelected(false);\r\n         setPlanetSelected(true);\r\n        \r\n    }\r\n\r\n    const handleAllFavorites = () => {\r\n        setFilterKey('all');\r\n        setPeopleSelected(false);\r\n         setAllSelected(true);\r\n         setPlanetSelected(false);\r\n        \r\n    }\r\n    if(filterKey==='people'){\r\n        filteredJ = [...myFavorites].filter((item)=>item.eye_color);\r\n    }else if(filterKey==='planet') {\r\n        filteredJ = [...myFavorites].filter((item)=>item.climate);\r\n    }else{\r\n        filteredJ = myFavorites;\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        \r\n            <section className=\"favorite-page\">\r\n                 \r\n                 <div className=\"selected-favorites\">\r\n                 <h2>My favorite lists are here:</h2>\r\n                 <button  className={(allSelected) ? 'favorite-clicked' : ''} onClick={handleAllFavorites}>All the favorites</button>\r\n                 <button className={(peopleSelected) ? 'favorite-clicked' : ''} onClick={handleFavoritePeople}>Favorite people</button>\r\n                 <button className={(planetSelected) ? 'favorite-clicked' : ''} onClick={handleFavoritePlanets}>Favorite planets</button>\r\n                   {filteredJ.map(person=>\r\n                   <div key={person.name}>\r\n                     <div className={(person.climate) ? 'unvisible' : ''}>\r\n                        Name:{person.name}<br />\r\n                        Birth-year:{person.birth_year}<br />\r\n                        Eye-color:{person.eye_color}<br />\r\n                        Skin-color:{person.skin_color}\r\n                        <p className={(person.status) ? 'invented' : 'existing'}>Status:<span className=\"status\">{person.status}</span></p>\r\n                     </div>\r\n                     <div  className = {(person.climate) ? '' : 'unvisible'}>\r\n                         Name: {person.name}<br />\r\n                         Climate :{person.climate}<br />\r\n                         Terrain:{person.terrain}\r\n                     </div>\r\n                     <button onClick={()=>{\r\n                        \r\n                        \r\n                         dispatch(actions.removeFromFavorite(person));\r\n                         \r\n                        }}\r\n                     >Delete!</button>\r\n                    </div>\r\n                     )}\r\n                 </div>\r\n                 \r\n                 \r\n            </section>\r\n        \r\n    );\r\n}\r\nexport default Favorites;","import React from 'react';\r\nconst Header = ({ setView, menu }) => (\r\n    <header>\r\n        <h1>Star Wars</h1>\r\n        <nav className=\"nav\">\r\n            <button onClick={() => setView(menu.SHOW_DATA)}>\r\n                People\r\n            </button>\r\n            \r\n            <button onClick={() => setView(menu.PLANET)}>\r\n             Planet\r\n            </button>\r\n\r\n            <button onClick={() => setView(menu.FORM)}>\r\n             Form\r\n            </button>\r\n\r\n            <button onClick={() => setView(menu.SHOW_FAVORITES)}>\r\n             The list of favorites\r\n            </button>\r\n        </nav>\r\n    </header>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\nconst Holder = ({children})=>(\r\n   <div className=\"holder\">\r\n       {children}\r\n   </div>\r\n)\r\nexport default Holder;","import React,{useState,useEffect} from 'react';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport { actions } from '../features/starwars';\r\nlet pageNumber =1;\r\nlet favoritePlanets = [];\r\nconst Planet = ({favoritePlanet}) => {\r\n    const dispatch = useDispatch();\r\n    const favoriteList = useSelector(state => state.starwars);\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [planets, setPlanets] = useState([]);\r\n    const [myFilter,setMyFilter] = useState('');\r\n    const [filtered,setFiltered] = useState([]);\r\n    const [showNext,setShowNext]  = useState(true);\r\n    const [showPrevious,setShowPrevious]  = useState(false);\r\n    const [selectedPerson, setSelectedPerson] = useState(null);\r\n    \r\n\r\n    //const [favoriteSelected,setFavoriteSelected] = useState(false);\r\n    \r\n    const [url,setUrl] = useState(`http://swapi.dev/api/planets/?page=${pageNumber}`);\r\n    \r\n   \r\n   \r\n    \r\n    const handleKeyUp = (event) => { \r\n      //setFavoriteSelected(false);\r\n      setMyFilter(event.target.value);\r\n      let filterWord = event.target.value;\r\n         \r\n           setFiltered([...planets].filter(planet =>(\r\n            planet.name.toLowerCase().includes(filterWord) ||\r\n            planet.climate.toLowerCase().includes(filterWord)) ||\r\n            planet.terrain.toLowerCase().includes(filterWord)\r\n            \r\n           ));   \r\n    }//handleKeyUp\r\n\r\n    \r\n    const handleAddPlanet = (planet) =>{\r\n        console.log('planet is:', planet);\r\n        favoritePlanets = [...favoritePlanets,planet];\r\n        console.log('favorite planets:',favoritePlanets);\r\n        dispatch(actions.addToFavorite(planet));\r\n    }\r\n\r\n\r\n    const handleNextData =(event) =>{\r\n      if(pageNumber<=5){\r\n          console.log('favoritePlanet',favoritePlanet);\r\n        if(pageNumber===8){setShowNext(false);}\r\n        setShowPrevious(true);\r\n        pageNumber= pageNumber+1;\r\n       \r\n      setUrl(`http://swapi.dev/api/planets/?page=${pageNumber}`) ;\r\n      }else{\r\n        console.log('over');\r\n        setShowNext(false);\r\n        \r\n       \r\n      }\r\n      \r\n    }  \r\n     \r\n    const handlePreviousData = () => {\r\n      if((pageNumber>=2)&&(pageNumber<=6)){\r\n        if(pageNumber===2){setShowPrevious(false);}\r\n        if(pageNumber>2){setShowPrevious(true);}\r\n        setShowNext(true);\r\n        pageNumber= pageNumber-1;\r\n        console.log('page number is:',pageNumber);\r\n       \r\n      setUrl(`http://swapi.dev/api/planets/?page=${pageNumber}`) ;\r\n      }else{\r\n        \r\n        setShowPrevious(false);\r\n        \r\n       \r\n      }\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    useEffect(() => {\r\n        \r\n            fetch(url)\r\n            .then(result => result.json())\r\n            .then(\r\n             (result) => {\r\n              setIsLoaded(true);\r\n              console.log('result is:',result);\r\n              if((pageNumber!==1)){setShowPrevious(true);}\r\n              if(pageNumber===6){setShowNext(false);}\r\n              //setFavoriteSelected(false);\r\n              setPlanets(result.results);\r\n              setFiltered(result.results);\r\n              \r\n              console.log('Next page is:',result.next);\r\n            },\r\n            (error) => {\r\n              setIsLoaded(true);\r\n              setError(error);\r\n            }\r\n          )\r\n\r\n         }, [url])\r\n    \r\n      if (error) {\r\n        return <div>Error: {error.message}</div>;\r\n      } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n      } else {\r\n        return (\r\n            <section>\r\n              <div className=\"list-leader\">\r\n              <input type=\"text\" value = {myFilter} onChange={handleKeyUp} placeholder=\"Search here what you want...\"></input>\r\n           \r\n           \r\n              <div>\r\n                \r\n                <button className={(!showPrevious) ? 'hideShowNext': 'showNext'} onClick={handlePreviousData}>Previous page!</button>\r\n                <button className={(showNext) ? 'showNext': 'hideShowNext'} onClick={handleNextData}>Next page!</button>\r\n              </div>\r\n              \r\n              \r\n              \r\n              \r\n              </div>\r\n                \r\n                \r\n              \r\n                <div className=\"people-list\">\r\n                \r\n                  {filtered.map(planet => (\r\n                     <div key={planet.name}>\r\n                      Name: {planet.name}<br/>\r\n                      Climate: {planet.climate}<br/>\r\n                      Terrain: {planet.terrain}<br />\r\n                     \r\n                    \r\n                      <button key={planet.name} \r\n                      className={((favoriteList.filter(p=>p.name===planet.name).length > 0)||(selectedPerson === planet.name)) ? 'favorite-selected' : 'favorite-unselected'}\r\n                      \r\n                      onClick={() =>{ setSelectedPerson(planet.name); handleAddPlanet(planet) }}>Add to favorites!</button>\r\n                      \r\n                      <button \r\n                      className={\r\n                        ((favoriteList.filter(p=>p.name===planet.name).length > 0)||(selectedPerson === planet.name)) ? 'visible' : 'unvisible'}>Selected!</button>\r\n        \r\n                     </div> \r\n                     \r\n                    ))}\r\n                    \r\n                </div>\r\n                \r\n                \r\n                <br />\r\n                \r\n            </section>\r\n          \r\n        );\r\n      }\r\n\r\n}\r\n    \r\n    \r\n   \r\n\r\nexport default Planet;\r\n\r\n","import React,{useState} from 'react';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport { actions } from '../features/starwars';\r\nconst Form = () =>{\r\n    let myOwnFavorite ={\r\n        name:'',\r\n        birth_year:'',\r\n        eye_color:'',\r\n        skin_color:'',\r\n        status:'INVENTED BY ME!'\r\n    }\r\n    const dispatch = useDispatch();\r\n    const myFavorites = useSelector(state => state.starwars);\r\n    \r\n    const [name,setName] = useState('');\r\n    const [birthYear,setBirthYear] = useState('');\r\n    const [eyeColor,setEyeColor] = useState('');\r\n    const [skinColor,setSkinColor] = useState('');\r\n    const [isAddedBefore,setIsAddedBefore] = useState(false);\r\n    const [submited,setSubmited] = useState(false);\r\n    const [nameTouched,setNameTouched] = useState(false);\r\n    const [birthTouched,setBirthTouched] = useState(false);\r\n    const [eyeTouched,setEyeTouched] = useState(false);\r\n    const [skinTouched,setSkinTouched] = useState(false);\r\n\r\n    let nameClass = '';\r\n    if( nameTouched ) {\r\n        if(name.length<4)\r\n            nameClass = 'invalid';\r\n    else\r\n            nameClass = 'valid';\r\n    }\r\n\r\n    let birthClass = '';\r\n    if( birthTouched ) {\r\n        if(birthYear.length<4)\r\n            birthClass = 'invalid';\r\n    else\r\n            birthClass = 'valid';\r\n    }\r\n\r\n    let eyeClass = '';\r\n    if( eyeTouched ) {\r\n        if((isNaN(eyeColor)&&(eyeColor.length>2)))\r\n            eyeClass = 'valid';\r\n    else\r\n            eyeClass = 'invalid';\r\n    } \r\n\r\n    let skinClass = '';\r\n    if( skinTouched ) {\r\n        if((isNaN(skinColor)&&(skinColor.length>2)))\r\n            skinClass = 'valid';\r\n    else\r\n            skinClass = 'invalid';\r\n    } \r\n\r\n    const handleSave = () =>{\r\n        \r\n        myOwnFavorite.name = name;\r\n        myOwnFavorite.birth_year =birthYear;\r\n        myOwnFavorite.eye_color =eyeColor;\r\n        myOwnFavorite.skin_color =skinColor;\r\n       let filteredFavorite = myFavorites.filter(p=>p.name===myOwnFavorite.name);\r\n       setSubmited(true);\r\n       if(filteredFavorite.length===0){\r\n        dispatch(actions.addToFavorite(myOwnFavorite));\r\n    \r\n       }else{\r\n           setIsAddedBefore(true);\r\n        \r\n       }\r\n        \r\n        \r\n    }\r\n    return(\r\n        \r\n            <div className=\"form\">\r\n                     <h2>Make your favorite person:</h2>\r\n                     <div>\r\n                         <label>Name:</label>\r\n                         <input type='text' value={name} className={nameClass} onBlur={event => setNameTouched(true)}\r\n                           onChange={e => {setName(e.target.value); setIsAddedBefore(false); setSubmited(false);}} />\r\n                           <span className={(nameClass==='invalid') ? 'show-error' : 'unvisible'}>The name should have at least 4 letters</span>\r\n                         <br />\r\n                         <label>Birth year:</label>\r\n                         <input type='text' value={birthYear} className={birthClass} onBlur={event => setBirthTouched(true)}\r\n                         onChange={e => setBirthYear(e.target.value)} />\r\n                         <span className={(birthClass==='invalid') ? 'show-error' : 'unvisible'}>The name should have at least 4 letters</span>\r\n                         <br />\r\n                         <label>Eye color:</label>\r\n                         <input type='text' value={eyeColor} className={eyeClass} onBlur={event => setEyeTouched(true)} \r\n                         onChange={e => setEyeColor(e.target.value)} />\r\n                         <span className={(eyeClass==='invalid') ? 'show-error' : 'unvisible'}>Write a color</span>\r\n                         <br />\r\n                         <label>Skin color:</label>\r\n                         <input type='text' value={skinColor} className={skinClass} onBlur={event => setSkinTouched(true)} \r\n                         onChange={e => setSkinColor(e.target.value)} />\r\n                         <span className={(skinClass==='invalid') ? 'show-error' : 'unvisible'}>Write a color</span>\r\n                         \r\n                         \r\n                     </div>\r\n                     <div className=\"form-button\">\r\n                        <button  disabled = {(submited)||(eyeClass==='') || (nameClass==='invalid')\r\n                        ||(birthClass==='invalid')||(eyeClass==='invalid') ||(skinClass==='invalid')} onClick={handleSave}>Submit!</button>\r\n                     </div>\r\n                     \r\n                    <h3 className={(isAddedBefore) ? 'added-before' : 'not-added'}>This person is added before.Try another name!</h3>\r\n                     \r\n                 </div>\r\n        \r\n    );\r\n}\r\nexport default Form;","import React,{useState} from 'react';\nimport './App.css';\nimport StarWars from './components/StarWars';\n//import favorites from './components/Favorites';\nimport Favorites from './components/Favorites';\nimport Header from './components/Header';\nimport Holder from './components/Holder';\nimport Planet from './components/Planet';\nimport Form from './components/Form';\n\nfunction App() {\n  const SHOW_DATA ='data' , SHOW_FAVORITES ='favorites', PLANET ='planet', FORM ='form';\n  const [view, setView] = useState(SHOW_DATA);\n  const [favoritePlanet] = ([]);\n  \n\n  let mainContent = null;\n  if (view === SHOW_DATA){\n    mainContent = <StarWars />;\n  }else if(view === SHOW_FAVORITES){\n    mainContent = <Favorites />;\n  }else if(view === PLANET) {\n    mainContent = <Planet favoritePlanet={favoritePlanet} />;\n  }else{\n    mainContent = <Form />;\n  }\n   \n  \n  return (\n    <>\n        <div className=\"header\">\n           <Header setView={setView} menu={{ SHOW_DATA, SHOW_FAVORITES,PLANET,FORM }} />\n        </div>\n        \n        <main>\n          <Holder>\n            {mainContent}\n          </Holder>\n            \n        </main>\n        \n        </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createAction, createReducer } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nconst addMyOwnName = createAction('add my own name');\r\nconst addMyOwnBirthYear = createAction('add my own birth year');\r\nconst actions = {addMyOwnName,addMyOwnBirthYear};\r\nconst initialState =[\r\n    {\r\n        name:'',\r\n        birth_year:''\r\n    }\r\n]\r\n    \r\n \r\n    \r\n\r\nconst reducer = createReducer(initialState, {\r\n    [addMyOwnName]: (state, action) => \r\n        [...state, {name: action.payload}],\r\n\r\n    [addMyOwnBirthYear]: (state, action) => \r\n        [...state, {birth_year: action.payload}]\r\n    \r\n         \r\n})\r\n\r\n\r\nexport { actions, reducer };","import { combineReducers } from 'redux';\r\nimport { reducer as starwarsReducer } from './starwars';\r\nimport { reducer as favoritesReducer } from './favorites';\r\n\r\nconst rootReducer = combineReducers({\r\n    // add feature reducer here\r\n    starwars: starwarsReducer,\r\n    favorites: favoritesReducer\r\n})\r\n\r\nexport { rootReducer };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Configure the Redux store\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { rootReducer } from './features/rootReducer';\n\nconst store = configureStore({\n    reducer: rootReducer\n})\n\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={store}> <App /> </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}